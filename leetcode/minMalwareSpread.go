package main

import "fmt"

func main() {
	graph := [][]int{[]int{1, 1, 0}, []int{1, 1, 0}, []int{0, 0, 1}}
	initial := []int{0, 1}
	fmt.Println(minMalwareSpread(graph, initial))
}

func minMalwareSpread(graph [][]int, initial []int) int {
	g := make([][]int, len(graph))
	for i := 0; i < len(graph); i++ {
		g[i] = make([]int, 0)
		for j := 0; j < len(graph[i]); j++ {
			if graph[i][j] == 1 && i != j {
				g[i] = append(g[i], j)
			}
		}
	}
	sort.Ints(initial)
	min := 2 << 31
	minIdx := -1
	for i := 0; i < len(initial); i++ {
		v := initial[i]
		t := make([]int, len(g[v]))
		copy(t, g[v])
		g[v] = []int{}
		marked := make(map[int]bool)
		for j := 0; j < len(initial); j++ {
			if v == initial[j] {
				continue
			}
			dfs(v, initial[j], g, marked)
		}
		if len(marked) < min {
			min = len(marked)
			minIdx = v
		}
		g[v] = t
	}
	return minIdx
}

func dfs(d, v int, graph [][]int, marked map[int]bool) {
	if v == d {
		return
	}
	marked[v] = true
	for _, idx := range graph[v] {
		if !marked[idx] {
			dfs(d, idx, graph, marked)
		}
	}
}
